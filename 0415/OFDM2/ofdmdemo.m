%OFDMDEMO Demonstrates OFDM Communication System
%
% To start the demo type "OFDMDEMO".
%
% For more information press "help" button
%
% Copyright (c) 2004-2009
% Weieelab
% School of Electronic and Information Engineering
% South China University of Technology
% All Rights Reserved.
%  
% Programmer:	YU Hua  eeyuhua@qq.com
% Version:      1.1	
% Date:         10/19/2009  - 12/09/2009
%  
% This program is free software; you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation; either version 2 of the License, or
% (at your option) any later version.
%  
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
%  
% The GNU Public License is available in the file LICENSE, or you
% can write to the Free Software Foundation, Inc., 59 Temple Place -
% Suite 330, Boston, MA 02111-1307, USA, or you can find it on the
% World Wide Web at http://www.fsf.org.

function  ofdmdemo(action);

if nargin < 1,
   action='init';
end;

if strcmp(action,'pause'),%  Pause/Restart Button
    hndlList  = get(gcf,'Userdata');
    pauseHndl = hndlList(25);
    startHndl = hndlList(26);    
    if (get(pauseHndl,'value')==get(pauseHndl,'max')) 
        %set(startHndl,'Enable','off');
        set(pauseHndl,'String','Restart');
    else
        %set(startHndl,'Enable','on');
        set(pauseHndl,'String','Pause');
    end
    return
    
elseif strcmp(action,'ClearScreen'),%  Clear screen
    hndlList  = get(gcf,'Userdata');
    for k=13:19
        cla(hndlList(k));
    end

    return
    
elseif strcmp(action,'simulation'), %Start/Stop Button
    hndlList  = get(gcf,'Userdata');
    startHndl = hndlList(26);
    pauseHndl = hndlList(25);
    clearHndl = hndlList(27);
    % if click stop simulation
    if (get(startHndl,'value') == get(startHndl,'min')) 
        % if in simulating, just retrun, to avoid simulate again
        set(startHndl,'String','Start Simulation');
        % Disable Pause button, espcially if Stop in Pause State,  
        % need restore Pause button to inital state.
        set(pauseHndl,'Enable','off','String','Pause',...
            'value',get(pauseHndl,'min'));
        set(clearHndl,'Enable','on');
        for k=[1:5 7:12]
            set(hndlList(k),'Enable','on');
        end          
        return
    end
    % if click start simulation
    set(startHndl,'String','Stop Simulation');
    set(pauseHndl,'Enable','on');
    set(clearHndl,'Enable','off');
    for k=1:12
        set(hndlList(k),'Enable','off');        
    end
    
    N   = get(hndlList(1),'userdata');
    Ncp = get(hndlList(2),'userdata');
    m   = get(hndlList(4),'value');
    SymbolRate = get(hndlList(3),'userdata');
    chtype     = get(hndlList(5),'value');
    chesmethod = get(hndlList(6),'value');
    SNRdB      = get(hndlList(7),'userdata');
    symboldelay= get(hndlList(9),'userdata');
    stepdelay  = get(hndlList(11),'userdata');

    h_TxRxData = hndlList(13);
    h_TxSymbol = hndlList(14);
    h_EqSymbol = hndlList(15);
    h_FdChannel= hndlList(16);
    h_TdChannel= hndlList(17);
    h_RxSymbol = hndlList(18);
    h_TxRxSignal = hndlList(19);
    
    symbolsHndl  = hndlList(20);
    sercursymHndl= hndlList(21);
    sertotsymHndl= hndlList(22);
    sertheoryHndl= hndlList(23);

    M     = 2^m;
    Pav   = 2*(M-1)/3.0;    %M-QAM星座格点的平均功率
    PavdB = 10*log10(Pav/N);%OFDM时域信号平均功率
    Ts    = 1/SymbolRate;   % Sampling Time
    % set channel parameters
    switch chtype
        case 2 % SUI-1
            Tau = [ 0.0 0.4 0.9 ]*1.0e-6;  % tap delay in s
            PdB = [  0  -15 -20 ];     % power in each tap in dB
            Fdop= [ 0.4 0.3 0.5 ];
        case 3 % SUI-2
            Tau = [ 0.0 0.4 1.1 ]*1.0e-6;  % tap delay in s
            PdB = [  0  -12 -15 ];     % power in each tap in dB
            Fdop= [ 0.2 0.15 0.25 ];
        case 4 % SUI-3
            Tau = [ 0.0 0.4 0.9 ]*1.0e-6;  % tap delay in s
            PdB = [ 0 -5 -10 ];     % power in each tap in dB
            Fdop= [ 0.4 0.3 0.5 ];
        case 5 % SUI-4
            Tau = [ 0.0 1.5  4 ]*1.0e-6;  % tap delay in s
            PdB = [  0  -4  -8 ];     % power in each tap in dB
            Fdop= [ 0.2 0.15 0.25 ];
        case 6 % SUI-5
            Tau = [ 0.0   4  10 ]*1.0e-6;  % tap delay in s
            PdB = [  0  -11 -22 ];     % power in each tap in dB
            Fdop= [  2  1.5 2.5 ];
        case 7 % SUI-6
            Tau = [ 0.0  14  20 ]*1.0e-6;  % tap delay in s
            PdB = [  0  -16 -26 ];     % power in each tap in dB
            Fdop= [ 0.4 0.3 0.5 ];
    end
    
    % set channel filter object and compute theory SER
    SNR   = 10.^(SNRdB/10);   %线性单位
    if chtype == 1
        % SER of OFDM in AWGN Channel
        Pm = 2*(1-1/sqrt(M))*erfc(sqrt(3*SNR/(M-1))/sqrt(2))/2.0;   %Q=erfc(x/sqrt(2))/2.0;
        thySER   = 1-(1-Pm).^2;
        maxChTap = N;
    else
        Fdop = 0;               % Quasi-static channel
        ch   = rayleighchan(Ts, Fdop, Tau, PdB);
        ChFilterDelay = ch.ChannelFilterDelay;
        ChTap    = round(Tau/Ts) + 1;     % 信道抽头编号, 选用的信道必须满足 Ncp >= max(ChTap)
        maxChTap = max(ChTap);
        % SER of OFDM in Fading Channel
        a2 = 3 * SNR  /(2 * (M-1));
        a  = sqrt (a2);
        thySER = 1/M * ((M-1) - 2 * a * (sqrt(M)-1) ./ sqrt(1+ a2) ...
            - 4 * a .*(sqrt(M)-1)^2 ./ (pi * sqrt(1 + a2)) .* atan( a./ sqrt(1+a2)));
    end
    set(sertheoryHndl,'string',num2str(thySER));

    hzero = zeros(1,maxChTap);
    numSimSymbols = 0;
    totErrSymbols = 0;
    numSimSymbols = 0;
    
    while(1)
        curErrSymbols = 0;
        ofdmdemo('ClearScreen');
        % Step 1: Generate random digital message
        Meg = randint(1,N,M); % Message signal
        if (stepdelay > 0.001 | symboldelay > 0.001)
            hold(h_TxRxData,'off');
            dn = ceil(1024/N); dt = 1/dn; sx = ones(dn,1) * Meg; sx = sx(:); % show data with square wave 
            plot(h_TxRxData,[0:dt:N-dt],sx,'LineWidth',2);
            %plot(h_TxRxData,[0:N-1],Meg,'LineWidth',2);
            set( h_TxRxData,'xlim',[0,N],'ylim',[0,M]);grid(h_TxRxData,'on');
            title( h_TxRxData,'Step 1,8: Tx/Rx Data','FontWeight','bold');
            legend(h_TxRxData,'Tx Data');
            hold(  h_TxRxData,'on'); pause(stepdelay);
        end
        % Step 2: M-QAM modulation.
        X = qammod(Meg,M);
        if (stepdelay > 0.001 | symboldelay > 0.001)
            scatter(h_TxSymbol, real(X), imag(X)); 
            grid(h_TxSymbol,'on');bound = ceil(sqrt(M));
            set(h_TxSymbol,'Box','on','xlim',[-bound,bound],'ylim',[-bound,bound]);
            title(h_TxSymbol, 'Step 2: Tx Modulated Symbol','FontWeight','bold');
            pause(stepdelay);
        end
        % Show Frequency Domain Modulation
        %figure(2);
        %f_k = [-3:0.1:3];
        %frefunc = sinc(f_k) .* exp(j*2*pi*f_k);        
        %for k = 1:N-1
        %    f = [k-3:0.1:k+3];
        %    Sf = X(k) * frefunc;
        %    subplot(2,2,1); hold on; plot(f,real(Sf));
        %    subplot(2,2,3); hold on; plot(f,imag(Sf));
        %end
        
        % Step 3: IFFT, generate time field signal, i.e., modulate at frequency Domain, 
        x = ifft(X);
        sig = [x(N-Ncp+1:end),x];   % Add CP
        if (stepdelay > 0.001 | symboldelay > 0.001)
            sigAmptide = abs(sig);
            hold(h_TxRxSignal,'off');
            plot(h_TxRxSignal,[0:N+Ncp-1],sigAmptide,'LineWidth',2);
            set(h_TxRxSignal,'xlim',[0,N+Ncp]);grid(h_TxRxSignal,'on');
            title(h_TxRxSignal,'Step 3,4,5: Tx/Ch/Rx Time Domain Signal (Amplitude)','FontWeight','bold');
            legend(h_TxRxSignal,'Tx Signal');
            hold(h_TxRxSignal,'all'); pause(stepdelay);
        end
        % Step 4: Transmit through Channel
        h = hzero;        
        if chtype == 1
            SigCh = sig;            % for AWGN, no fading channel
            h(1) = 1;
            H = ones(1,N);
        else
            SigCh = filter(ch, sig);
            h(ChTap) = ch.PathGains;
            H = fft(h,N);
        end
        if (stepdelay > 0.001 | symboldelay > 0.001)
            stem(h_TdChannel,[0:maxChTap-1],abs(h));
            set( h_TdChannel,'xlim',[0,maxChTap-1]);grid(h_TdChannel,'on');
            plot(h_FdChannel,[0:N-1],abs(H));
            set( h_FdChannel,'xlim',[0,N]);grid(h_FdChannel,'on');
            title(h_TdChannel,'Step 4: Time Domain Channel (Amplitude)','FontWeight','bold');
            title(h_FdChannel,'Step 4: Frequency Domain Channel (Amplitude)','FontWeight','bold');
            plot(h_TxRxSignal,[0:N+Ncp-1],abs(SigCh),'Color','g','LineWidth',1);
            legend(h_TxRxSignal,'Tx Signal','Ch Signal');
            pause(stepdelay);
        end
        % Step 5: AWGN
        SigNoisy = awgn(SigCh,SNRdB,PavdB);
        Noise    = SigNoisy - SigCh;
        if (stepdelay > 0.001 | symboldelay > 0.001)
            plot(h_TxRxSignal,[0:N+Ncp-1],abs(SigNoisy),'Color','r','LineWidth',1);
            plot(h_TxRxSignal,[0:N+Ncp-1],abs(Noise),'Color','m','LineWidth',1);
            legend(h_TxRxSignal,'Tx Signal','Ch Signal','Rx Signal', 'AWGN');
            pause(stepdelay);
        end
        % Step 6: FFT, Come back to Frequency Field
        SigNoisy = SigNoisy(Ncp+1:end);  % Delete CP
        SigFF    = fft(SigNoisy);
        if ((stepdelay > 0.001 | symboldelay > 0.001) & M<= 2048)
            scatter(h_RxSymbol, real(SigFF), imag(SigFF));  
            grid(h_RxSymbol,'on');set(h_RxSymbol,'Box','on',...
                'xlim',[-bound,bound],'ylim',[-bound,bound]);
            title(h_RxSymbol, 'Step 6: Rx Demodulated Symbol','FontWeight','bold');
        end    
        % Step 7: Frequency domain equalization
        % 对于多径衰落信道必须采用频域均衡后再进行解调，以将信道的衰落影响消除
        % Zero-forceing
        Zzf = 1./H;
        SigZf    = SigFF .* Zzf;
        if ((stepdelay > 0.001 | symboldelay > 0.001) & M<= 2048)
            scatter(h_EqSymbol, real(SigZf),imag(SigZf)); 
            grid(h_EqSymbol,'on');set(h_EqSymbol,'Box','on',...
                'xlim',[-bound,bound],'ylim',[-bound,bound]);
            title(h_EqSymbol, 'Step 7: Rx Equalized Symbol','FontWeight','bold');
        end
        % Step 8: Demodulate, to recover the message.
        zzf      = qamdemod(SigZf,M);
        if (stepdelay > 0.001 | symboldelay > 0.001 | symboldelay > 0.001)
            dn = ceil(1024/N); dt = 1/dn; sx = ones(dn,1) * zzf; sx = sx(:);
            plot(h_TxRxData,[0:dt:N-dt],sx,'Color','r','LineWidth',1);
            %plot(h_TxRxData,[0:N-1],zzf,'Color','r','LineWidth',1);
            legend(h_TxRxData,'Tx Data','Rx Data');
        end    
        % Step 9: Compute symbol error rate.
        ErrZf    = Meg - zzf;
        curErrSymbols = length(find(ErrZf~= 0));        
        totErrSymbols = totErrSymbols + curErrSymbols;
        
        % Step 10: Show simulation results
        numSimSymbols = numSimSymbols + 1;
        curSER = curErrSymbols / N;
        totSER = totErrSymbols / (N*numSimSymbols);
        set(symbolsHndl,  'string',num2str(numSimSymbols));
        set(sercursymHndl,'string',num2str(curSER));
        set(sertotsymHndl,'string',num2str(totSER));
        
        pause(0.0001);
        pause(symboldelay);
        
        % if 'Pause' Button is press
        while(get(pauseHndl,'value')==get(pauseHndl,'max'))
            % if press Stop while waiting, can stop simulation too.
            if  (get(startHndl,'value')==get(startHndl,'min'))
                break;
            end
            pause(0.01);  % waiting for press Restart
        end
        
        % if 'Stop' Button is press
        if  (get(startHndl,'value')==get(startHndl,'min'))
            break;       
        end
    end
    return

elseif strcmp(action,'init'),
    %close all;
    shh = get(0,'showHiddenHandles');% get showHiddenHandle in figure
    set(0,'showHiddenHandles','on')  % show HiddenHandles in figure
 
    hGUI = figure( ...            % generate figure window 
          'Name','OFDM Demo', ...
          'unit','normalized',...
          'ToolBar','figure',...
          'handlevisibility','callback',...
          'IntegerHandle','off',...
          'NumberTitle','off',...
          'Position',[0.005,0,0.99,0.8]);
    maximize(hGUI);               % does work
    set(gcf,'Pointer','watch');   % cann't operate mouse

    h_TxRxData=axes('parent',hGUI,...
        'unit','normalized','position',[0.025,0.71,0.5,0.25],...
        'Box','on','fontsize',8);

    h_TxSymbol=axes('parent',hGUI,...
        'unit','normalized','position',[0.55,0.71,0.2,0.25],...
        'Box','on','fontsize',8);

    h_EqSymbol = axes('parent',hGUI,...
        'unit','normalized','position',[0.025,0.38,0.2,0.25],...
        'Box','on','fontsize',8);
    h_FdChannel=axes('parent',hGUI,...
        'unit','normalized','position',[0.25,0.38,0.275,0.25],...
        'Box','on','fontsize',8);

    h_TdChannel=axes('parent',hGUI,...
        'unit','normalized','position',[0.55,0.38,0.20,0.25],...
        'Box','on','fontsize',8);

    h_RxSymbol=axes('parent',hGUI,...
        'unit','normalized','position',[0.025,0.05,0.2,0.25],...
        'Box','on','fontsize',8);

    h_TxRxSignal=axes('parent',hGUI,...
        'unit','normalized','position',[0.25,0.05,0.5,0.25],...
        'Box','on','fontsize',8);

    title(h_TxRxData, 'Step 1,8: Tx/Rx Data','FontWeight','bold');
    title(h_TxSymbol, 'Step 2: Tx Modulated Symbol','FontWeight','bold');
    title(h_EqSymbol, 'Step 7: Rx Equalized Symbol','FontWeight','bold');
    title(h_FdChannel,'Step 4: Frequency Domain Channel (Amplitude)','FontWeight','bold');
    title(h_TdChannel,'Step 4: Time Domain Channel (Amplitude)','FontWeight','bold');
    title(h_RxSymbol, 'Step 6: Rx Demodulated Symbol','FontWeight','bold');
    title(h_TxRxSignal,'Step 3,4,5: Tx/Ch/Rx Time Domain Signal (Amplitude)','FontWeight','bold');
   
   % console frame setup
   frmLeft   = 0.775; frmWidth  = 0.22; frmBorder = 0.005;
   ctlBottom = 0.30;  ctlHeight = 0.66; ctltop = ctlBottom + ctlHeight;
   
   frmPos=[frmLeft ctlBottom frmWidth ctlHeight];
   h=uicontrol( ...
      'Style','frame', ...
      'Units','normalized', ...
      'Position',frmPos,...%[0.775 0.35 0.22 0.61], ...%
      'BackgroundColor',[0.5 0.5 0.5]);

   % result frame setup
   rsltBottom= 0.05; rsltHeight = 0.17;   rslttop = rsltBottom + rsltHeight;   
   rsltPos=[frmLeft rsltBottom frmWidth rsltHeight];
   
   h=uicontrol( ...
      'Style','frame', ...
      'Units','normalized', ...
      'Position',rsltPos,...%[0.775 0.05 0.22 0.3], ...%
      'BackgroundColor',[0.5 0.5 0.5]);  
  
   % Ctrol parameters
   btnleft = frmLeft  +   frmBorder; %0.785;
   btnWid  = frmWidth - 2*frmBorder; %0.2;
   btnHt   = 0.035;
   textHeight = 0.03;
   textWidth  = 0.11;
   spacing    = 0.005;
   labelWidth = btnWid - textWidth - spacing;
  
   titlePos = [frmLeft,ctltop + spacing frmWidth 0.025];
   h = uicontrol( ...
      'Style','text', ...
      'Units','normalized', ...
      'Position',titlePos, ...
      'Horiz','left', ...
      'String','Parameters and Processing Methods', ...
      'FontWeight','bold','FontSize',10,...
      'Interruptible','off', ...
      'BackgroundColor',[0.8 0.8 0.8], ...
      'ForegroundColor','black');
   
   titlePos = [frmLeft,rslttop + spacing labelWidth/2 0.025];
   h = uicontrol( ...
      'Style','text', ...
      'Units','normalized', ...
      'Position',titlePos, ...
      'Horiz','left', ...
      'String','Results', ...
      'FontWeight','bold','FontSize',10,...
      'Interruptible','off', ...
      'BackgroundColor',[0.8 0.8 0.8], ...
      'ForegroundColor','black');

   titlePos = [frmLeft 0.01 frmWidth 0.025];
   h = uicontrol( ...
      'Style','text', ...
      'Units','normalized', ...
      'Position',titlePos, ...
      'Horiz','left', ...
      'String','By YU Hua, eeyuhua@qq.com, 2009-10-21', ...
      'FontWeight','bold','FontSize',10,...
      'Interruptible','off', ...
      'BackgroundColor',[0.8 0.8 0.8], ...
      'ForegroundColor','black');  
 
   %Display the SCUT & EE Logo
   Logo1=axes('parent',hGUI,'unit','normalized','visible', 'off','Position', ...
        [btnleft+labelWidth/2+spacing rslttop+spacing textWidth+labelWidth/2 ctlBottom-rslttop-2*spacing]);
   LogoHdl=imread('scutlogo','jpg');   imshow(LogoHdl);
   %Logo2=axes('parent',hGUI,...
   %     'unit','normalized','Position', [frmLeft+0.153 rslttop+spacing 0.07 0.07],'visible', 'off');
   %LogoHd2=imread('eelogo','jpg');   imshow(LogoHd2);
   
   % N (FFT Size) label
   labelBottom = ctltop - btnHt - spacing;
   labelPos = [btnleft labelBottom labelWidth textHeight];
   h = uicontrol( ...
      'Style','text', ...
      'Units','normalized', ...
      'Position',labelPos, ...
      'Horiz','left', ...
      'String','FFT Size (N)', ...
      'FontWeight','bold',...
      'Interruptible','off', ...
      'BackgroundColor',[0.5 0.5 0.5], ...
      'ForegroundColor','white');
   
   % set N
   textPos = [btnleft+labelWidth+spacing labelBottom textWidth textHeight];
   NHndl = uicontrol( ...
      'Style','edit', ...
      'Units','normalized', ...
      'Position',textPos, ...
      'Max',1, ... 
      'Horiz','center', ...
      'Background','white', ...
      'Foreground','black', ...
      'String','64','Userdata',64, ...
      'callback', 'ofdmdemo(''setN'')');

   % Ncp label
   labelBottom = labelBottom - (btnHt+spacing);
   labelPos = [btnleft labelBottom labelWidth textHeight];
   h = uicontrol( ...
      'Style','text', ...
      'Units','normalized', ...
      'Position',labelPos, ...
      'Horiz','left', ...
      'String','Cycle Prefix (Ncp)', ...
      'FontWeight','bold',...
      'Interruptible','off', ...
      'BackgroundColor',[0.5 0.5 0.5], ...
      'ForegroundColor','white');
   
   % set Ncp
   textPos = [btnleft+labelWidth+spacing labelBottom textWidth textHeight];
   NcpHndl = uicontrol( ...
      'Style','edit', ...
      'Units','normalized', ...
      'Position',textPos, ...
      'Max',1, ... 
      'Horiz','center', ...
      'Background','white', ...
      'Foreground','black', ...
      'String','16','Userdata',16, ...
      'callback', 'ofdmdemo(''setNcp'')');  

   % Sampling Rate label
   labelBottom = labelBottom - (btnHt+spacing);
   labelPos = [btnleft labelBottom labelWidth textHeight];
   h = uicontrol( ...
      'Style','text', ...
      'Units','normalized', ...
      'Position',labelPos, ...
      'Horiz','left', ...
      'String','Sampling Rate', ...
      'FontWeight','bold',...
      'Interruptible','off', ...
      'BackgroundColor',[0.5 0.5 0.5], ...
      'ForegroundColor','white');
   
   % set Sampling Rate
   textPos = [btnleft+labelWidth+spacing labelBottom textWidth textHeight];
   samprHndl = uicontrol( ...
      'Style','text', ...
      'Units','normalized', ...
      'Position',textPos, ...
      'Max',1, ... 
      'Horiz','center', ...
      'Background',[0.75 0.75 0.75],...%'white', ...
      'Foreground','black', ...
      'String','20*1.0e6','Userdata',20*1.0e6, ...
      'callback', 'ofdmdemo(''setSamplingRate'')');
  
   % Constellation label
   labelBottom = labelBottom - (btnHt+spacing);
   labelPos = [btnleft labelBottom labelWidth textHeight];
   h = uicontrol( ...
      'Style','text', ...
      'Units','normalized', ...
      'Position',labelPos, ...
      'Horiz','left', ...
      'String','Constellation', ...
      'FontWeight','bold',...
      'Interruptible','off', ...
      'BackgroundColor',[0.5 0.5 0.5], ...
      'ForegroundColor','white');

   % Constellation Selection Menu
   btnPos = [btnleft+labelWidth+spacing labelBottom textWidth btnHt];
 labelstr = [' BPSK (1bits/symbol)| QPSK (2bits/symbol)| 8QAM (3bits/symbol)'...
              '|16QAM (4bits/symbol)|32QAM (5bits/symbol)|64QAM (6bits/symbol)'...
              '|128QAM(7bits/symbol)|256QAM(8bits/symbol)|512QAM(9bits/symbol)'...
              '|1024QAM(10bits/symbol)|2048QAM(11bits/symbol)|4096QAM(12bits/symbol)'...
              '|8192QAM(13bits/symbol)|16384QAM(14bits/symbol)|32768QAM(15bits/symbol)'];
   cstlHndl=uicontrol( ...
      'Style','popupmenu', ...
      'Units','normalized', ...
      'Position',btnPos, ...
      'String',labelstr, ...
      'Interruptible','on', ...
      'value',2);

  
   % Channel label
   labelBottom = labelBottom - (btnHt+spacing);
   labelPos = [btnleft labelBottom labelWidth textHeight];
   h = uicontrol( ...
      'Style','text', ...
      'Units','normalized', ...
      'Position',labelPos, ...
      'Horiz','left', ...
      'String','Channel', ...
      'FontWeight','bold',...
      'Interruptible','off', ...
      'BackgroundColor',[0.5 0.5 0.5], ...
      'ForegroundColor','white');

   % Channel Selection Menu
   btnPos = [btnleft+labelWidth+spacing labelBottom textWidth btnHt];
   labelstr = ['AWGN|'...
       'SUI-1 (Max delay = 18 taps)|'...
       'SUI-2 (Max delay = 22 taps)|'...
       'SUI-3 (Max delay = 18 taps)|'...
       'SUI-4 (Max delay = 80 taps)|'...
       'SUI-5 (Max delay = 200 taps)|'...
       'SUI-6 (Max delay = 400 taps)|'];
   chHndl=uicontrol( ...
      'Style','popupmenu', ...
      'Units','normalized', ...
      'Position',btnPos, ...
      'String',labelstr, ...
      'Interruptible','on', ...
      'value',2);

   % Channel Estimation Method label
   labelBottom = labelBottom - (btnHt+spacing);
   labelPos = [btnleft labelBottom labelWidth textHeight];
   h = uicontrol( ...
      'Style','text', ...
      'Units','normalized', ...
      'Position',labelPos, ...
      'Horiz','left', ...
      'String','Channel Est', ...
      'FontWeight','bold',...
      'Interruptible','off', ...
      'BackgroundColor',[0.5 0.5 0.5], ...
      'ForegroundColor','white');

   % Channel Estimation Method Menu
   btnPos = [btnleft+labelWidth+spacing labelBottom textWidth btnHt];
   labelstr = ['Prefect|LS (Least Square)|MMSE(Ref.[1])|LMMSE(Ref.[1])'];
   chesHndl=uicontrol( ...
      'Style','popupmenu', 'Enable','off', ...
      'Units','normalized', ...
      'Position',btnPos, ...
      'String',labelstr, ...
      'Interruptible','on');

   % Timing Sync Method label
   labelBottom = labelBottom - (btnHt+spacing);
   labelPos = [btnleft labelBottom labelWidth textHeight];
   h = uicontrol( ...
      'Style','text', ...
      'Units','normalized', ...
      'Position',labelPos, ...
      'Horiz','left', ...
      'String','Timing Sync', ...
      'FontWeight','bold',...
      'Interruptible','off', ...
      'BackgroundColor',[0.5 0.5 0.5], ...
      'ForegroundColor','white');

   % Timing Sync Method Menu
   btnPos = [btnleft+labelWidth+spacing labelBottom textWidth btnHt];
   labelstr = ['Prefect'];
   timingHndl=uicontrol( ...
      'Style','popupmenu', 'Enable','off', ...
      'Units','normalized', ...
      'Position',btnPos, ...
      'String',labelstr, ...
      'Interruptible','on');

   % Freq Sync Method label
   labelBottom = labelBottom - (btnHt+spacing);
   labelPos = [btnleft labelBottom labelWidth textHeight];
   h = uicontrol( ...
      'Style','text', ...
      'Units','normalized', ...
      'Position',labelPos, ...
      'Horiz','left', ...
      'String','Freq Sync (CFO Est)', ...
      'FontWeight','bold',...
      'Interruptible','off', ...
      'BackgroundColor',[0.5 0.5 0.5], ...
      'ForegroundColor','white');

   % Freq Sync Method Menu
   btnPos = [btnleft+labelWidth+spacing labelBottom textWidth btnHt];
   labelstr = ['Prefect'];
   cfoestHndl=uicontrol( ...
      'Style','popupmenu', 'Enable','off', ...
      'Units','normalized', ...
      'Position',btnPos, ...
      'String',labelstr, ...
      'Interruptible','on');
  
   % Channel shortening Method label
   labelBottom = labelBottom - (btnHt+spacing);
   labelPos = [btnleft labelBottom labelWidth textHeight];
   h = uicontrol( ...
      'Style','text', ...
      'Units','normalized', ...
      'Position',labelPos, ...
      'Horiz','left', ...
      'String','Channel Shortening', ...
      'FontWeight','bold',...
      'Interruptible','off', ...
      'BackgroundColor',[0.5 0.5 0.5], ...
      'ForegroundColor','white');

   % Channel shortening Method Menu
   btnPos = [btnleft+labelWidth+spacing labelBottom textWidth btnHt];
   labelstr = ['None'];
   cseHndl=uicontrol( ...
      'Style','popupmenu', 'Enable','off', ...
      'Units','normalized', ...
      'Position',btnPos, ...
      'String',labelstr, ...
      'Interruptible','on');

   % Loading Method label
   labelBottom = labelBottom - (btnHt+spacing);
   labelPos = [btnleft labelBottom labelWidth textHeight];
   h = uicontrol( ...
      'Style','text', ...
      'Units','normalized', ...
      'Position',labelPos, ...
      'Horiz','left', ...
      'String','Loading', ...
      'FontWeight','bold',...
      'Interruptible','off', ...
      'BackgroundColor',[0.5 0.5 0.5], ...
      'ForegroundColor','white');

   % Loading Method Menu
   btnPos = [btnleft+labelWidth+spacing labelBottom textWidth btnHt];
   labelstr = ['None|RA (RA(Max Rate)|MA (Min Power)|Min SER'];
   timingHndl=uicontrol( ...
      'Style','popupmenu', 'Enable','off',...
      'Units','normalized', ...
      'Position',btnPos, ...
      'String',labelstr, ...
      'Interruptible','on');
  
   % Target SER label
   labelBottom = labelBottom - (btnHt+spacing);
   labelPos = [btnleft labelBottom labelWidth textHeight];
   h = uicontrol( ...
      'Style','text', ...
      'Units','normalized', ...
      'Position',labelPos, ...
      'Horiz','left', ...
      'String','Target SER', ...
      'FontWeight','bold',...
      'Interruptible','off', ...
      'BackgroundColor',[0.5 0.5 0.5], ...
      'ForegroundColor','white');
   
   % set Target SER
   textPos = [btnleft+labelWidth+spacing labelBottom textWidth textHeight];
   targetserHndl = uicontrol( ...
      'Style','text', ...
      'Units','normalized', ...
      'Position',textPos, ...
      'Max',1, ... 
      'Horiz','center', ...
      'Background',[0.75 0.75 0.75],...%'white', ...
      'Foreground','black', ...
      'String','1.0e-3','Userdata',1.0e-3, ...
      'callback', 'ofdmdemo(''TargetSER'')');
  
   % SNR label
   labelBottom = labelBottom - (btnHt+spacing);
   labelPos = [btnleft labelBottom labelWidth textHeight];
   h = uicontrol( ...
      'Style','text', ...
      'Units','normalized', ...
      'Position',labelPos, ...
      'Horiz','left', ...
      'String','SNR (dB)', ...
      'FontWeight','bold',...
      'Interruptible','off', ...
      'BackgroundColor',[0.5 0.5 0.5], ...
      'ForegroundColor','white');

   % set SNR1
   textPos = [btnleft+labelWidth+spacing labelBottom 0.73*textWidth textHeight];
   snr1Hndl = uicontrol( ...
      'Style','edit', ...
      'Units','normalized', ...
      'Position',textPos, ...
      'Max',1, ... 
      'Horiz','center', ...
      'Background','white', ...
      'Foreground','black', ...
      'String','15','Userdata',15, ...
      'callback', 'ofdmdemo(''setSNR1'')');
  
   % set SNR2
   btnPos = [btnleft+labelWidth+spacing+0.75*textWidth ...
       labelBottom 0.25*textWidth textHeight];
   snr2Hndl=uicontrol( ...
      'Style','slider', ...
      'Units','normalized', ...
      'Position',btnPos, ...
      'Max',100,'Min',0,'Value',15,'Userdata',15,...
      'SliderStep',[0.01 0.01],...
      'Interruptible','on', ...
      'Callback','ofdmdemo(''setSNR2'')');
  
   % Symbol's Delay label
   labelBottom = labelBottom - (btnHt+spacing);
   labelPos = [btnleft labelBottom labelWidth textHeight];
   h = uicontrol( ...
      'Style','text', ...
      'Units','normalized', ...
      'Position',labelPos, ...
      'Horiz','left', ...
      'String','Symbol Delay(s)', ...
      'FontWeight','bold',...
      'Interruptible','off', ...
      'BackgroundColor',[0.5 0.5 0.5], ...
      'ForegroundColor','white');

   % set Symbol's Delay 1
   textPos = [btnleft+labelWidth+spacing labelBottom 0.73*textWidth textHeight];
   symbold1Hndl = uicontrol( ...
      'Style','edit', ...
      'Units','normalized', ...
      'Position',textPos, ...
      'Max',1, ... 
      'Horiz','center', ...
      'Background','white', ...
      'Foreground','black', ...
      'String','5','Userdata',5, ...
      'callback', 'ofdmdemo(''setSymbolDelay1'')');
  
   % set Symbol's Delay 2
   btnPos = [btnleft+labelWidth+spacing+0.75*textWidth ...
       labelBottom 0.25*textWidth textHeight];
   symbold2Hndl=uicontrol( ...
      'Style','slider', ...
      'Units','normalized', ...
      'Position',btnPos, ...
      'Max',50,'Min',0,'Value',5,'Userdata',5 ,...
      'SliderStep',[0.01 0.01],...
      'Interruptible','on', ...
      'Callback','ofdmdemo(''setSymbolDelay2'')');
  
   % Step's Delay label
   labelBottom = labelBottom - (btnHt+spacing);
   labelPos = [btnleft labelBottom labelWidth textHeight];
   h = uicontrol( ...
      'Style','text', ...
      'Units','normalized', ...
      'Position',labelPos, ...
      'Horiz','left', ...
      'String','Step Delay(s)', ...
      'FontWeight','bold',...
      'Interruptible','off', ...
      'BackgroundColor',[0.5 0.5 0.5], ...
      'ForegroundColor','white');

   % set Step's Delay 1
   textPos = [btnleft+labelWidth+spacing labelBottom 0.73*textWidth textHeight];
   stepd1Hndl = uicontrol( ...
      'Style','edit', ...
      'Units','normalized', ...
      'Position',textPos, ...
      'Max',1, ... 
      'Horiz','center', ...
      'Background','white', ...
      'Foreground','black', ...
      'String','1','Userdata',1, ...
      'callback', 'ofdmdemo(''setStepDelay1'')');
  
   % set  Step's Delay 2
   btnPos = [btnleft+labelWidth+spacing+0.75*textWidth ...
       labelBottom 0.25*textWidth textHeight];
   stepd2Hndl=uicontrol( ...
      'Style','slider', ...
      'Units','normalized', ...
      'Position',btnPos, ...
      'Max',10,'Min',0,'Value',1,...
      'SliderStep',[0.01 0.01],...
      'Interruptible','on', ...
      'String','1','Userdata',1, ...
      'Callback','ofdmdemo(''setStepDelay2'')');
  
   % Start/Stop button
   startHndl=uicontrol( ...
      'Style','togglebutton', ...%pushbutton
      'Units','normalized', ...
      'Position',[btnleft ctlBottom + btnHt + 3*spacing (btnWid-spacing)/2 btnHt], ...
      'String','Start Simulation', ...
      'FontWeight','bold',...
      'Callback','ofdmdemo(''simulation'')');

   % Clear User Screen button
   clearHndl=uicontrol( ...
      'Style','pushbutton', ...
      'Units','normalized', ...
      'Position',[btnleft+(btnWid+spacing)/2 ...
        ctlBottom + btnHt + 3*spacing (btnWid-spacing)/2 btnHt], ...
      'String','Clear Screen', ...
      'FontWeight','bold',...
      'Callback','ofdmdemo(''ClearScreen'')');  
  
   % Pause/Restart button
   pauseHndl=uicontrol( ...
      'Style','togglebutton', ...
      'Enable','off',...
      'Units','normalized', ...
      'Position',[btnleft ctlBottom+2*spacing (btnWid-spacing)/2 btnHt], ...
      'String','Pause', ...
      'FontWeight','bold',...
      'Callback','ofdmdemo(''pause'')');
  
   % help button
   helpHndl=uicontrol( ...
      'Style','pushbutton', ...
      'Units','normalized', ...
      'Position',[btnleft+(btnWid+spacing)/2 ...
                  ctlBottom+2*spacing (btnWid-spacing)/2 btnHt], ...
      'String','Help', ...
      'FontWeight','bold',...
      'Callback','ofdmdemo(''help'')');
 
   % Simulated Symbols Label
   labelBottom = rslttop - (btnHt+spacing);
   labelPos = [btnleft labelBottom labelWidth textHeight];
   h = uicontrol( ...
      'Style','text', ...
      'Units','normalized', ...
      'Position',labelPos, ...
      'Horiz','left', ...
      'String','No. Symbols', ...
      'FontWeight','bold',...
      'Interruptible','off', ...
      'BackgroundColor',[0.5 0.5 0.5], ...
      'ForegroundColor','white');
   
   % show Number of Simulated Symbols
   textPos = [btnleft+labelWidth+spacing labelBottom textWidth textHeight];
   symbolsHndl = uicontrol( ...
      'Style','text', ...
      'Units','normalized', ...
      'Position',textPos, ...
      'Max',1, ... 
      'Horiz','center', ...
      'Background',[0.75 0.75 0.75],...%'white', ...
      'Foreground','black');

   % SER of Current symbol
   labelBottom = labelBottom - (btnHt+spacing);
   labelPos = [btnleft labelBottom labelWidth textHeight];
   h = uicontrol( ...
      'Style','text', ...
      'Units','normalized', ...
      'Position',labelPos, ...
      'Horiz','left', ...
      'String','SERcursymbol', ...
      'FontWeight','bold',...
      'Interruptible','off', ...
      'BackgroundColor',[0.5 0.5 0.5], ...
      'ForegroundColor','white');
   
   % show SER of Current Symbol
   textPos = [btnleft+labelWidth+spacing labelBottom textWidth textHeight];
   sercursymHndl = uicontrol( ...
      'Style','text', ...
      'Units','normalized', ...
      'Position',textPos, ...
      'Max',1, ... 
      'Horiz','center', ...
      'Background',[0.75 0.75 0.75],...%'white', ...
      'Foreground','black');
  
   % SER of Total simulated symbols
   labelBottom = labelBottom - (btnHt+spacing);
   labelPos = [btnleft labelBottom labelWidth textHeight];
   h = uicontrol( ...
      'Style','text', ...
      'Units','normalized', ...
      'Position',labelPos, ...
      'Horiz','left', ...
      'String','SERtotsymbols', ...
      'FontWeight','bold',...
      'Interruptible','off', ...
      'BackgroundColor',[0.5 0.5 0.5], ...
      'ForegroundColor','white');
   
   % show SER of Current Symbol
   textPos = [btnleft+labelWidth+spacing labelBottom textWidth textHeight];
   sertotsymHndl = uicontrol( ...
      'Style','text', ...
      'Units','normalized', ...
      'Position',textPos, ...
      'Max',1, ... 
      'Horiz','center', ...
      'Background',[0.75 0.75 0.75],...%'white', ...
      'Foreground','black');  

   % Label: Theory SER
   labelBottom = labelBottom - (btnHt+spacing);
   labelPos = [btnleft labelBottom labelWidth textHeight];
   h = uicontrol( ...
      'Style','text', ...
      'Units','normalized', ...
      'Position',labelPos, ...
      'Horiz','left', ...
      'String','SERtheory', ...
      'FontWeight','bold',...
      'Interruptible','off', ...
      'BackgroundColor',[0.5 0.5 0.5], ...
      'ForegroundColor','white');
   
   % show Theory SER
   textPos = [btnleft+labelWidth+spacing labelBottom textWidth textHeight];
   sertheoryHndl = uicontrol( ...
      'Style','text', ...
      'Units','normalized', ...
      'Position',textPos, ...
      'Max',1, ... 
      'Horiz','center', ...
      'Background',[0.75 0.75 0.75],...%'white', ...
      'Foreground','black');
  
   % put all handles in userdata of the parent object
   fhndlList = [NHndl NcpHndl samprHndl cstlHndl chHndl chesHndl...%1-6
       snr1Hndl snr2Hndl symbold1Hndl symbold2Hndl stepd1Hndl ...  %7-11
       stepd2Hndl ...                                              %12
       h_TxRxData h_TxSymbol h_EqSymbol h_FdChannel h_TdChannel ...%13-18
       h_RxSymbol h_TxRxSignal,...                                 %18-19
       symbolsHndl,sercursymHndl,sertotsymHndl,sertheoryHndl ...   %20-23
       helpHndl pauseHndl startHndl clearHndl];                    %24-27

   set(hGUI,'Visible','on','UserData',fhndlList);

   drawnow
   set(gcf,'Pointer','arrow','handlevisibility','callback');
   set(0,'showHiddenHandles',shh)
   return

   % set N
elseif strcmp(action,'setN'),
   v = get(gco,'Userdata');
   vv = str2num(get(gco,'String'));
   % N has to be a power of 2
   if ((floor(log(vv)/log(2))-(log(vv)/log(2))) ~= 0)
      vv = v; 
   end
   set(gco,'Userdata',vv,'String',num2str(vv))
   return

   % set Ncp
elseif strcmp(action,'setNcp'),
   hndlList=get(gcf,'Userdata');
   N  = get(hndlList(1),'userdata');
   vv = str2num(get(gco,'String'));
   % do not allow Nw<1 or if MSSNR is chosen Nw>=Nb
   if vv < 0 | (vv > N),
      vv = N/4;
   end
   set(gco,'Userdata',vv,'String',num2str(vv))
   return
   
   % set Sampling Rate
elseif strcmp(action,'setSamplingRate'),
   v = str2num(get(gco,'String'));
   set(gco,'userdata',v);
   return

   % set SNR1
elseif strcmp(action,'setSNR1'),
   v = str2num(get(gco,'String'));
   set(gco,'userdata',v); %set SNR2
   hndlList=get(gcf,'Userdata');
   set(hndlList(8),'userdata',v,'Value',v); %set SNR2
   return

   % set SNR2 
elseif strcmp(action,'setSNR2'),
   v = get(gco,'value');
   set(gco,'userdata',v);  %set SNR2
   hndlList=get(gcf,'Userdata');
   set(hndlList(7),'userdata',v,'String',num2str(v)); %set SNR1
   return
   
   % set Symbol's delay 1
elseif strcmp(action,'setSymbolDelay1'),
   v = str2num(get(gco,'String'))
   set(gco,'userdata',v); %set SymbolDelay1
   hndlList=get(gcf,'Userdata');
   set(hndlList(10),'userdata',v,'Value',v); %set SymbolDelay2
   return

   % set SNR2 
elseif strcmp(action,'setSymbolDelay2'),
   v = get(gco,'value');
   set(gco,'userdata',v);  %set SymbolDelay2
   hndlList=get(gcf,'Userdata');
   set(hndlList(9),'userdata',v,'String',num2str(v)); %set SymbolDelay1
   return
   
   % set Step's delay 1
elseif strcmp(action,'setStepDelay1'),
   v = str2num(get(gco,'String'))
   set(gco,'userdata',v); %set StepDelay1
   hndlList=get(gcf,'Userdata');
   set(hndlList(12),'userdata',v,'Value',v); %set StepDelay2
   return

   % set Step's delay2 
elseif strcmp(action,'setStepDelay2'),
   v = get(gco,'value');
   set(gco,'userdata',v);  %set SymbolDelay2
   hndlList=get(gcf,'Userdata');
   set(hndlList(11),'userdata',v,'String',num2str(v)); %set StepDelay1
   return

   % get help
elseif strcmp(action,'help'),
   ttlStr = get(gcf,'name');  %?????
   myFig  = gcf;              %?????
   
   topic1 =  ['OFDM Demo'];
   helptop1 = [...
    'This demo lets you understand the basic implementation steps of OFDM  '
    'and analyze its performance.                                          '     
    '                                                                      '
    'Usage: Set parameters to desired values and hit the Start button.     '];
   topic2 =  ['Simulation Parameters and Methods'];
   helptop2 = [...
    'On the control window on the right are some editable text boxes and   '
    'pulldown buttons, which are used to set the desired parameters and    '
    'methods. The following parameters and methods are supported:          '
    '  N            - FFT size, should be a power of 2                     '
    '  Ncp          - Cycle Prefix, should be less than or equal to N      '
    '  Sampling Rate- Baseband sample rate, to compute channel delay taps  '
    '  Constellation- Digital modulation style each subcarrier             '
    '  Channel      - The digital modulation of each subcarrier            '  
    '                 AWGN and SUI1-SUI6                                   '
    '  SNR          - Signal to noise power ratio                          '
    '  Symbol delay - Pause time after each OFDM symbol, for user watching '     
    '  Step   delay - Pause time after each processing step, for watching  '
    '                                                                      '
    '  Channel Est - Channel estimation method, not available this edition '     
    '  Timing  Syn - Timing synchronization method, not available          '     
    '  Freq    Syn - Frequency synchronization (carrier frequency offset   '
    '                estimation) method, not available this edition        '     
    '  Channel shortening - Channel shortening equalization method for     '
    '                long channel response, ( Ncp < max channel delay),    '
    '                not available this edition                            ' 
    '  Loading     - Bit loading and power allocation, not available       '
    '  Target SER  - Loading parameter, not available this edition         '];
 
   topic3 =  ['Performance Measures'];
   helptop3 = [...
    'No. Symbols  - The number of simulated OFDM symbols                   '
    'SERcursymbol - SER of current OFDM symbol                             '
    'SERtotsymbol - SER of the total simulated OFDM symbols                '
    'SERtheory    - SER of OFDM system in AWGN or Fading Channel, Ref. to  '
    ' [1]2005-Exact closed-form sep for arbitrary rectangular M-QAM        '
    '    transmission over flat rayleigh fading channels                   '
    ' [2]2005-Exact symbol error rate and total degradation perfrormance of'
    '    nonlinear M-QAM fading channels                                   '];
   
   topic4 =  ['M Code'];
   helptop4 = [...
    'N     = 256;                                                '
    'Ncp   = 64;                                                 '
    'M     = 16;             %16QAM                              '
    'Pav   = 2*(M-1)/3.0;    % average power of each subcarrier  '
    'PavdB = 10*log10(Pav/N);% average power of time signal in dB'
    'SNRdB = 20;                                                 '
    'SNR   = 10.^(SNRdB/10);                                     '
    'SymbolRate = 20e6;      % Sampling Rate                     '
    'Ts         = 1/SymbolRate;                                  '
    'chtype     = 2;         % Channel Type                      '
    'NoSymbols  = 1000;      % OFDM Symbol number to simulate    '
    '% Set channel parametes and Compute theory SER              '
    'if chtype == 1  % AWGN                                      '
    '    % SER of OFDM in AWGN Channel                           '
    '    Pm = 2*(1-1/sqrt(M))*erfc(sqrt(3*SNR/(M-1)/2))/2.0;     '
    '    thySER   = 1-(1-Pm).^2                                  '
    '    maxChTap = N;                                           '
    'else            % SUI-3                                     '
    '    Tau = [ 0.0 0.4 0.9 ]*1.0e-6;  % tap delay in s         '
    '    PdB = [ 0 -5 -10 ];            % power in each tap in dB'
    '    Fdop = 0;                      % Quasi-static channel   '
    '    ch   = rayleighchan(Ts, Fdop, Tau, PdB);                '
    '    ChFilterDelay = ch.ChannelFilterDelay;                  '
    '    ChTap    = round(Tau/Ts) + 1;                           '
    '    maxChTap = max(ChTap);                                  '
    '    % SER of OFDM in Fading Channel                         '
    '    a2 = 3 * SNR  /(2 * (M-1));                             '
    '    a  = sqrt (a2);                                         '
    '    thySER = 1/M * ((M-1) - 2 * a * (sqrt(M)-1) ...         '
    '            ./ sqrt(1+ a2) - 4 * a .*(sqrt(M)-1)^2 ...      '
    '            ./ (pi * sqrt(1 + a2)) .* atan( a./ sqrt(1+a2)))'
    'end                                                         '
    '                                                            '
    'hzero = zeros(1,maxChTap);                                  '
    'numSimSymbols = 0;                                          '
    'totErrSymbols = 0;                                          '
    'numSimSymbols = 0;                                          '
    '                                                            '
    'for numSimSymbols = 1 : NoSymbols                           '
    '    curErrSymbols = 0;                                      '
    '    % Step 1: Generate random digital message               '
    '    Meg = randint(1,N,M); % Message signal                  '
    '    % Step 2: M-QAM modulation.                             '
    '    X = qammod(Meg,M);                                      '
    '    % Step 3: IFFT, generate time field signal,             '
    '    % i.e., modulate at frequency Field,                    '
    '    x = ifft(y);                                            '
    '    sig = [y(N-Ncp+1:end),y];   % Add CP                    '
    '    % Step 4: Transmit through Channel                      '
    '    h = hzero;                                              '
    '    if chtype == 1                                          '
    '        SigCh = sig;                                        '
    '        h(1)  = 1;                                          '
    '        H     = ones(1,N);                                  '
    '    else                                                    '
    '        SigCh    = filter(ch, sig);                         '
    '        h(ChTap) = ch.PathGains;                            '
    '        H        = fft(h,N);                                '
    '    end                                                     '
    '    % Step 5: AWGN                                          '
    '    SigNoisy = awgn(SigCh,SNRdB,PavdB);                     '
    '    % Step 6: FFT, Come back to Frequency Field             '
    '    SigNoisy = SigNoisy(Ncp+1:end);  % Delete CP            '
    '    SigFF    = fft(SigNoisy);                               '
    '    % Step 7: Frequency domain equalization                 '
    '    Zzf      = 1./H;                                        '
    '    SigZf    = SigFF .* Zzf;                                '
    '    % Step 8: Demodulate, to recover the message.           '
    '    zzf      = qamdemod(SigZf,M);                           '
    '    % Step 9: Compute symbol error rate.                    '
    '    ErrZf    = Meg - zzf;                                   '
    '    curErrSymbols = length(find(ErrZf~= 0));                '
    '    totErrSymbols = totErrSymbols + curErrSymbols;          '
    '                                                            '
    '    % Step 10: Show simulation results                      '
    '    curSER = curErrSymbols / N;                             '
    '    totSER = totErrSymbols / (N*numSimSymbols);             '
    'end                                                         '
    'totSER                                                      '];
		 
   str =  { topic1 helptop1; topic2 helptop2; topic3 helptop3; topic4 helptop4 };
   
   helpwin(str,'Topic 1','Simple OFDM Communication System Demo')                   
   return  
   
else
   disp(sprintf( 'Internal ERROR: ''%s'' not recognized',action))
end